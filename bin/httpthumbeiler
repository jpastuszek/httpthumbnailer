#!/usr/bin/ruby

require 'sinatra'
require 'haml'
require 'RMagick'

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))
require 'thumbnailer'
require 'thumbnail_specs'

set :port, 3123
set :bind, 'localhost'
set :environment, 'production'
set :server, ['mongrel']
set :lock, true
set :boundary, "thumnail image data"

before do
	unless @thumbnailer 
		@thumbnailer = Thumbnailer.new(:logger => logger)
		@thumbnailer.method('crop') do |image, spec|
			image.resize_to_fill(spec.width, spec.height)
		end
	end
end

helpers do
	def plain_exception(exception)
		headers "Content-Type" => "text/plain"
		body "Error: #{exception.class.name}: #{exception}\n"
	end
end

get '/' do
	logger.info 'hello'
end

put %r{/thumbnail/([^/]*)/([^/]*)/([^/]*)/(.*)} do |id, pw, ph, specs|
	image = begin
		@thumbnailer.load(id, request.body)
	rescue => e
		plain_exception(e)
		halt 415
	end

	thumbnail_specs = ThumbnailSpecs.from_uri(specs)

	status 200
	headers "Content-Type" => "multipart/mixed; boundary=\"#{settings.boundary}\""
	stream do |out|
		thumbnail_specs.each do |ts|
			logger.info "Thumbnailing: #{ts}"
			out << "--#{settings.boundary}\n"

			begin
				thumbnail = @thumbnailer.thumbnail(id, ts)
				thumbnail_data = thumbnail.to_blob do |inf|
					inf.format = ts.format
				end

				out << "Content-type: #{ts.mime}\n\n"
				out << thumbnail_data

				thumbnail_data = nil
				thumbnail.destroy!
			rescue => e
				out << "Content-type: text/plain\n\n"
				out << "Error: #{e.class.name}: #{e}\n"
			end
		end
		out << "--#{settings.boundary}--"
	end
end

error do
	plain_exception(env['sinatra.error'])
end

