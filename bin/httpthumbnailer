#!/usr/bin/env ruby
require 'cli'
require 'ip'
require 'cuba'
require 'unicorn'
require 'facter'

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

options = CLI.new do
	description 'HTTP image thumbnailing server'
	option :log_file,
		short: :l,
		cast: Pathname,
		description: 'log file to log to',
		default: 'wcc-user-manager.log'
	option :pid_file,
		short: :p,
		cast: Pathname,
		description: 'file to store lock PID',
		default: 'wcc-user-manager.pid'
	switch :foreground,
		short: :f,
		description: 'stay in foreground'
	option :bind,
		short: :b,
		cast: IP,
		description: 'HTTP server bind address - use 0.0.0.0 to bind to all interfaces',
		default: IP.new('127.0.0.1')
	option :port,
		short: :P,
		cast: Integer,
		description: 'HTTP server TCP port',
		default: 3100
	option :user,
		short: :u,
		description: 'run worker processes as user'
	option :worker_processes,
		short: :w,
		cast: Integer,
		description: 'start given number of worker processes',
		default: Facter.sp_number_processors.to_i + 1
	option :worker_timeout,
		short: :t,
		cast: Integer,
		description: 'workers handling the request taking longer than this time period will be forcibly killed',
		default: 60
	option :limit_memory,
		cast: Integer,
		description: 'image cache heap memory size limit in bytes',
		default: 128*1024**2
	option :limit_map,
		cast: Integer,
		description: 'image cache memory mapped file size limit in bytes - used when heap memory limit is used up',
		default: 1024*1024**2
	option :limit_disk,
		cast: Integer,
		description: 'image cache temporary file size limit in bytes - this is total disk usage limit including memory mapped file size',
		default: 1024*1024**2
	switch :no_optimization,
		description: 'disable size hinting and related optimization (hinted loading, prescaling)'
	switch :verbose,
		short: :v,
		description: 'enable verbose logging (INFO)'
	switch :debug,
		short: :d,
		description: 'enable debugging logging (DEBUG)'
end.parse!

require 'httpthumbnailer/root_logger'

root_logger = RootLogger.new(STDERR)
root_logger.level = RootLogger::WARN
root_logger.level = RootLogger::INFO if options.verbose
root_logger.level = RootLogger::DEBUG if options.debug

class Controler < Cuba
	def self.root_logger=(root_logger)
		@@root_logger = root_logger
	end

	def self.logger_for(class_obj)
		@@root_logger.logger_for(class_obj)
	end
end

Controler.root_logger = root_logger

Controler.settings[:optimization] = (not options.no_optimization)
Controler.settings[:limit_memory] = options.limit_memory
Controler.settings[:limit_map] = options.limit_map
Controler.settings[:limit_disk] = options.limit_disk
Controler.settings[:listeners] = ["#{options.bind}:#{options.port}"]

require 'httpthumbnailer/plugin/error_matcher'
require 'httpthumbnailer/plugin/logging'
require 'httpthumbnailer/plugin/response_helpers'
require 'httpthumbnailer/rack/error_handling'
require 'httpthumbnailer/rack/unhandled_request'

require 'httpthumbnailer/error_reporter'
require 'httpthumbnailer/thumbnailer'

Controler.plugin Plugin::ErrorMatcher
Controler.plugin Plugin::Logging
Controler.plugin Plugin::ResponseHelpers

class HTTPThumbniler < Controler
	self.use Raindrops::Middleware, path: '/stats/requests'
	self.use Rack::ErrorHandling
	self.use Rack::UnhandledRequest

	self.define do
		on error? do
			run ErrorReporter
		end

		on 'health_check' do
			write_plain 200, 'OK'
		end

		on root do
			write_plain 200, 'HTTP Thumbniler'
		end

		run Thumbnailer
	end
end

unicorn_options = {}
unicorn_options[:logger] = root_logger.logger_for(Unicorn::HttpServer)
unicorn_options[:worker_processes] = options.worker_processes
unicorn_options[:timeout] = options.worker_timeout
unicorn_options[:listeners] = ["#{options.bind}:#{options.port}"]
unicorn_options[:user] = options.user if options.user

Unicorn::HttpServer.new(HTTPThumbniler, unicorn_options).start.join

